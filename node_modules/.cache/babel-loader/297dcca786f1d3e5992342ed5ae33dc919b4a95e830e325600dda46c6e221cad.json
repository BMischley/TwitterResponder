{"ast":null,"code":"// Function to handle the extraction of tweet text when you click on a tweet\nfunction handleTweetClick(event){// For simplicity, this assumes that the tweet text is in an element with a class \"tweet-text\"\nvar tweetText=event.target.querySelector('.tweet-text');if(tweetText){// Send the tweet text to the popup or background script\nchrome.runtime.sendMessage({type:\"TWEET_SELECTED\",data:tweetText.textContent});}}// Add an event listener to all tweets on the page (assuming tweets have a class \"tweet\")\nvar tweets=document.querySelectorAll('.tweet');tweets.forEach(function(tweet){return tweet.addEventListener('click',handleTweetClick);});// Listen for messages from popup or background script\nchrome.runtime.onMessage.addListener(function(message,sender,sendResponse){if(message.type===\"SOME_MESSAGE_TYPE\"){// Handle the message and possibly send a response\nsendResponse({data:\"Some response data\"});}});","map":{"version":3,"names":["handleTweetClick","event","tweetText","target","querySelector","chrome","runtime","sendMessage","type","data","textContent","tweets","document","querySelectorAll","forEach","tweet","addEventListener","onMessage","addListener","message","sender","sendResponse"],"sources":["/Users/blakemischley/Desktop/Personal_Projects/Twitter_Responder/twitter-response-generator/src/scripts/content.js"],"sourcesContent":["// Function to handle the extraction of tweet text when you click on a tweet\nfunction handleTweetClick(event) {\n    // For simplicity, this assumes that the tweet text is in an element with a class \"tweet-text\"\n    const tweetText = event.target.querySelector('.tweet-text');\n    \n    if (tweetText) {\n        // Send the tweet text to the popup or background script\n        chrome.runtime.sendMessage({ type: \"TWEET_SELECTED\", data: tweetText.textContent });\n    }\n}\n\n// Add an event listener to all tweets on the page (assuming tweets have a class \"tweet\")\nconst tweets = document.querySelectorAll('.tweet');\ntweets.forEach(tweet => tweet.addEventListener('click', handleTweetClick));\n\n// Listen for messages from popup or background script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === \"SOME_MESSAGE_TYPE\") {\n        // Handle the message and possibly send a response\n        sendResponse({ data: \"Some response data\" });\n    }\n});\n"],"mappings":"AAAA;AACA,QAAS,CAAAA,gBAAgBA,CAACC,KAAK,CAAE,CAC7B;AACA,GAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,MAAM,CAACC,aAAa,CAAC,aAAa,CAAC,CAE3D,GAAIF,SAAS,CAAE,CACX;AACAG,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC,CAAEC,IAAI,CAAE,gBAAgB,CAAEC,IAAI,CAAEP,SAAS,CAACQ,WAAY,CAAC,CAAC,CACvF,CACJ,CAEA;AACA,GAAM,CAAAC,MAAM,CAAGC,QAAQ,CAACC,gBAAgB,CAAC,QAAQ,CAAC,CAClDF,MAAM,CAACG,OAAO,CAAC,SAAAC,KAAK,QAAI,CAAAA,KAAK,CAACC,gBAAgB,CAAC,OAAO,CAAEhB,gBAAgB,CAAC,GAAC,CAE1E;AACAK,MAAM,CAACC,OAAO,CAACW,SAAS,CAACC,WAAW,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAEC,YAAY,CAAK,CACpE,GAAIF,OAAO,CAACX,IAAI,GAAK,mBAAmB,CAAE,CACtC;AACAa,YAAY,CAAC,CAAEZ,IAAI,CAAE,oBAAqB,CAAC,CAAC,CAChD,CACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}